{"version":3,"sources":["components/Clock.tsx","App.tsx","index.tsx"],"names":["getTime","Date","toLocaleTimeString","Clock","state","date","timerId","this","window","setInterval","setState","console","info","prevProps","props","clockName","debug","clearInterval","className","React","Component","getRandomName","value","now","toString","slice","App","hasClock","document","addEventListener","event","preventDefault","ReactDOM","render","getElementById"],"mappings":"sNAMA,SAASA,IACP,OAAO,IAAIC,MAAOC,qBAGb,IAAMC,EAAb,4MACEC,MAAyB,CACvBC,KAAML,KAFV,EAKEM,QAAU,EALZ,uDAOE,WAAqB,IAAD,OAClBC,KAAKD,QAAUE,OAAOC,aAAY,WAChC,IAAMJ,EAAOL,IAEb,EAAKU,SAAS,CAAEL,SAChBM,QAAQC,KAAKP,KACZ,OAbP,gCAgBE,SAAmBQ,GACbN,KAAKO,MAAMC,YAAcF,EAAUE,WACrCJ,QAAQK,MAAR,uBAA8BH,EAAUE,UAAxC,eAAwDR,KAAKO,MAAMC,cAlBzE,kCAsBE,WACEP,OAAOS,cAAcV,KAAKD,WAvB9B,oBA0BE,WACE,IAAQD,EAASE,KAAKH,MAAdC,KACAU,EAAcR,KAAKO,MAAnBC,UAER,OACE,sBAAKG,UAAU,QAAf,UACE,wBAAQA,UAAU,cAAlB,SACGH,IAGF,YAED,sBAAMG,UAAU,cAAhB,SACGb,WAvCX,GAA2Bc,IAAMC,WCNjC,SAASC,IACP,IAAMC,EAAQrB,KAAKsB,MAAMC,WAAWC,OAAO,GAE3C,MAAM,SAAN,OAAgBH,GAQX,IAAMI,EAAb,4MACEtB,MAAyB,CACvBW,UAAW,UACXY,UAAU,GAHd,uDAME,WAAqB,IAAD,OAClBlB,aAAY,WACV,EAAKC,SAAS,CAAEK,UAAWM,QAC1B,MAEHO,SAASC,iBAAiB,eAAe,SAACC,GACxCA,EAAMC,iBACN,EAAKrB,SAAS,CAAEiB,UAAU,OAG5BC,SAASC,iBAAiB,SAAS,WACjC,EAAKnB,SAAS,CAAEiB,UAAU,SAjBhC,oBAqBE,WACE,MAAgCpB,KAAKH,MAA7BW,EAAR,EAAQA,UAAWY,EAAnB,EAAmBA,SAEnB,OACE,sBAAKT,UAAU,MAAf,UACE,6CAECS,GACC,cAAC,EAAD,CAAOZ,UAAWA,WA7B5B,GAAyBI,IAAMC,WCZ/BY,IAASC,OACP,cAAC,EAAD,IACAL,SAASM,eAAe,W","file":"static/js/main.188afb4c.chunk.js","sourcesContent":["/* eslint-disable no-console */\nimport React from 'react';\n\ntype Props = { clockName: string };\ntype State = { date: string };\n\nfunction getTime() {\n  return new Date().toLocaleTimeString();\n}\n\nexport class Clock extends React.Component<Props, State> {\n  state: Readonly<State> = {\n    date: getTime(),\n  };\n\n  timerId = 0;\n\n  componentDidMount() {\n    this.timerId = window.setInterval(() => {\n      const date = getTime();\n\n      this.setState({ date });\n      console.info(date);\n    }, 1000);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.clockName !== prevProps.clockName) {\n      console.debug(`Renamed from ${prevProps.clockName} to ${this.props.clockName}`);\n    }\n  }\n\n  componentWillUnmount() {\n    window.clearInterval(this.timerId);\n  }\n\n  render() {\n    const { date } = this.state;\n    const { clockName } = this.props;\n\n    return (\n      <div className=\"Clock\">\n        <strong className=\"Clock__name\">\n          {clockName}\n        </strong>\n\n        {' time is '}\n\n        <span className=\"Clock__time\">\n          {date}\n        </span>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Clock } from './components/Clock';\n\nfunction getRandomName(): string {\n  const value = Date.now().toString().slice(-4);\n\n  return `Clock-${value}`;\n}\n\ntype State = {\n  clockName: string;\n  hasClock: boolean;\n};\n\nexport class App extends React.Component<{}, State> {\n  state: Readonly<State> = {\n    clockName: 'Clock-0',\n    hasClock: true,\n  };\n\n  componentDidMount() {\n    setInterval(() => {\n      this.setState({ clockName: getRandomName() });\n    }, 3300);\n\n    document.addEventListener('contextmenu', (event) => {\n      event.preventDefault();\n      this.setState({ hasClock: false });\n    });\n\n    document.addEventListener('click', () => {\n      this.setState({ hasClock: true });\n    });\n  }\n\n  render() {\n    const { clockName, hasClock } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n\n        {hasClock && (\n          <Clock clockName={clockName} />\n        )}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}